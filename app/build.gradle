buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.travlog.android.apps"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true

        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_SHA", "\"${commitSha()}\""
        buildConfigField "String", "BUILD_DATE", "\"${commitTime()}\""
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        if (System.getenv("TRAVIS")) {
            release {
                storeFile rootProject.file('travlog.jks')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {
            release {

            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
        }
        staging {
            applicationIdSuffix ".staging"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def newName = "travlog-${output.name}"

            if (output.zipAlign) {
                outputFileName = newName + ".apk"
            } else {
                output.packageApplication.outputFile = newName + "-unaligned.apk"
            }
        }
    }
}

task debug() {
    dependsOn('clean', 'assembleDebug')
}

task staging() {
    dependsOn('clean', 'assembleStaging')
}

task release() {
    dependsOn('clean', 'assembleRelease')
}


debug.mustRunAfter clean
staging.mustRunAfter clean
release.mustRunAfter clean

dependencies {
    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$support"
    implementation "com.android.support:design:$support"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.android.support:multidex:1.0.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.2.41"

    implementation 'com.facebook.stetho:stetho:1.5.0'

    implementation "com.google.android.gms:play-services-auth:$firebase"

    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"

    implementation 'com.jakewharton.timber:timber:4.7.0'

    implementation "io.reactivex.rxjava2:rxjava:2.1.12"
    implementation "io.reactivex.rxjava2:rxkotlin:2.2.0"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:$rxlifecycle2"
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:$rxlifecycle2"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rxbinding2"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rxbinding2"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:$rxbinding2"

    implementation "com.jakewharton:butterknife:$butterknife"
    kapt "com.jakewharton:butterknife-compiler:$butterknife"

    implementation 'com.facebook.android:facebook-login:4.29.0'

    implementation 'joda-time:joda-time:2.9.9'

    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    implementation 'jp.wasabeef:glide-transformations:3.1.1'

    implementation 'com.github.arimorty:floatingsearchview:2.1.1'
    implementation 'com.wdullaer:materialdatetimepicker:3.5.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.2@aar') {
        transitive = true;
    }
    implementation 'com.savvi.datepicker:rangepicker:1.2.0'
}
apply plugin: 'com.google.gms.google-services'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.3'
        languageVersion = '1.3'
    }
}

// SHA and timestamp caching courtesy of https://github.com/gdg-x/frisbee/blob/develop/app/build.gradle#L193-L218
def commitSha() {
    def file = new File(project.buildDir, "commit-sha.txt")
    if (file.exists()) {
        return file.text
    }

    def value = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

    file.parentFile.mkdirs()
    file.text = value
    return value
}

def commitTime() {
    def file = new File(project.buildDir, "commit-timestamp.txt")
    if (file.exists()) {
        return file.text
    }

    def date = new Date()
    def value = date.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

    file.parentFile.mkdirs()
    file.text = value
    return value
}